{"version":3,"sources":["assets/Koodarijahti_tunnus.svg","assets/vincit_logo_red.jpg","components/Login/LoginForm.js","pages/Login/LoginPage.js","components/Game/Counter.js","components/Game/Connection.js","components/Game/GameForm.js","pages/Game/GamePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginForm","props","useState","userName","setUsername","reDirect","setReDirect","userExists","setExists","localStorage","setItem","to","pathname","state","name","className","onSubmit","event","preventDefault","a","async","fetch","fetchUser","status","doesExists","src","logo","alt","class","placeholder","onChange","e","target","value","type","LoginPage","Counter","counter","Socket","console","log","this","socket","socketIOClient","query","reconnection","reconnectionDelay","reconnectionAttempts","didWin","GameForm","setCounter","setSocket","useEffect","getUSERNAME","sock","getItem","getSocket","parseInt","onClick","emit","on","data","playerPoints","points","alert","style","color","outline","GamePage","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ba23a5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Koodarijahti_tunnus.12b65193.svg\";","module.exports = __webpack_public_path__ + \"static/media/vincit_logo_red.3fb72115.jpg\";","import React, { useState } from \"react\";\r\nimport \"../../styles/login-form-clean.css\";\r\nimport \"../../styles/styles.css\";\r\nimport \"../../styles/styles.min.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport logo from \"../../assets/vincit_logo_red.jpg\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\nconst LoginForm = props => {\r\n  const [userName, setUsername] = useState(\"\");\r\n  const [reDirect, setReDirect] = useState(false); //For router, redirecting to game page\r\n  const [userExists, setExists] = useState(false);\r\n\r\n  const doesExists = async name => {\r\n    const fetchUser = await fetch(\r\n      \"http://testvinc.herokuapp.com/doesExists?userName=\" + name\r\n    );\r\n    let responseStatus = await fetchUser.status;\r\n\r\n    if (responseStatus === 200) {\r\n      setReDirect(true);\r\n    } else {\r\n      setExists(true);\r\n    }\r\n  };\r\n\r\n  //Handling request, when user press submit button\r\n  const onSubmit = event => {\r\n    event.preventDefault();\r\n    doesExists(userName);\r\n  };\r\n\r\n  //Handling textinput when passing text\r\n  const handleChange = e => {\r\n    setUsername(e.target.value);\r\n  };\r\n  //Redirection\r\n  if (reDirect === true) {\r\n    localStorage.setItem(\"USERNAME\", userName);\r\n    localStorage.setItem(\"COUNTER\", 20);\r\n\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: \"/game\",\r\n          state: { name: userName }\r\n        }}\r\n      ></Redirect>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-clean\">\r\n      <form onSubmit={onSubmit}>\r\n        <img src={logo} alt=\"Amazing Vincit Logo\" />\r\n        {userExists && (\r\n          <div class=\"alert alert-danger\">\r\n            <strong>TUNNUS ON OLEMASSA</strong> Valitse uusi käyttäjätunnus\r\n          </div>\r\n        )}\r\n        <div className=\"illustration\"></div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            placeholder=\"Käyttäjätunnus\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n            Pelaa\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport LoginForm from \"../../components/Login/LoginForm\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../styles/styles.css\";\r\nimport \"../../styles/styles.min.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport logo from \"../../assets/Koodarijahti_tunnus.svg\";\r\n\r\nconst LoginPage = () => {\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <img src={logo} alt=\"Coding Duck\" />\r\n      <LoginForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport \"../../styles/counter.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * Counter presents player points\r\n * @param {counter} counter integer\r\n */\r\nconst Counter = ({ counter }) => {\r\n  return <label className=\"counter\">{counter}</label>;\r\n};\r\n\r\nCounter.propTypes = {\r\n  counter: PropTypes.number\r\n};\r\n\r\nexport default Counter;\r\n","import socketIOClient from \"socket.io-client\";\r\n\r\nexport default class Socket {\r\n  constructor(name, counter) {\r\n    console.log(\"Connection established\");\r\n    this.socket = socketIOClient(\"http://testvinc.herokuapp.com/\", {\r\n      query: { name, counter },\r\n      reconnection: true,\r\n      reconnectionDelay: 500,\r\n      reconnectionAttempts: 10\r\n    });\r\n  }\r\n\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Counter from \"../../components/Game/Counter\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Flatted, { stringify } from \"flatted/esm\";\r\nimport Socket from \"./Connection\";\r\n//Endpoint\r\nlet didWin = false;\r\nconst GameForm = props => {\r\n  //Counter\r\n  const [counter, setCounter] = useState(20); //Our game counter\r\n  const [socket, setSocket] = useState(); // Saving Socket\r\n  /**\r\n   * Handling count for counter\r\n   */\r\n  const handleOnClick = () => {\r\n    //Sending click for server\r\n    socket.emit(\"game\");\r\n    didWin = false;\r\n    socket.on(\"number\", data => {\r\n      setCounter(data.playerPoints);\r\n      if (didWin === false) {\r\n        if (data.points > 0) {\r\n          alert(\"VOITTO\");\r\n        } else {\r\n          setCounter(data.playerPoints);\r\n        }\r\n        didWin = true;\r\n      }\r\n      //setCounter(data);\r\n      //localStorage.setItem(\"COUNTER\", counter);\r\n    });\r\n  };\r\n\r\n  //Similar to componentDidMount (for OldSchool pals)\r\n  //Functions passed to useEffect are executed on\r\n  //every component rendering—unless you pass a second argument to it.\r\n  useEffect(() => {\r\n    console.log(\"Saving Socket...\");\r\n    var name = getUSERNAME();\r\n    const sock = new Socket(name, localStorage.getItem(\"COUNTER\"));\r\n    setSocket(sock.getSocket());\r\n    //LocalStorage will use string as a type of storage so therefore convert string to integer\r\n    setCounter(parseInt(localStorage.getItem(\"COUNTER\")));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n     localStorage.setItem(\"COUNTER\", counter);\r\n  }, [counter]);\r\n\r\n  //Get USERNAME from localStorage\r\n  const getUSERNAME = () => {\r\n    let USERNAME = localStorage.getItem(\"USERNAME\");\r\n    return USERNAME;\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-clean\">\r\n      <div className=\"container\">\r\n        <Counter counter={counter} />\r\n        <button onClick={handleOnClick} className=\"button\">\r\n          <a style={{ color: \"black\", outline: 0 }}>Paina</a>\r\n        </button>\r\n        <a>{getUSERNAME()}</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameForm;\r\n","import React from \"react\";\r\nimport \"../../styles/playbutton.css\";\r\nimport \"../../styles/gamepage.css\";\r\nimport logo from \"../../assets/Koodarijahti_tunnus.svg\";\r\nimport GameForm from \"../../components/Game/GameForm\";\r\n\r\nconst GamePage = (props) => {\r\n  return (\r\n    <div className=\"body\">\r\n      <img src={logo} alt=\"Coding Duck\" />\r\n      <GameForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n","import React from \"react\";\nimport LoginPage from \"../src/pages/Login/LoginPage\";\nimport GamePage from \"../src/pages/Game/GamePage\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path={\"/\"} render={props => <LoginPage {...props} />} />\n          <Route\n            exact\n            path={\"/game\"}\n            render={props => <GamePage {...props} />}\n          />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}